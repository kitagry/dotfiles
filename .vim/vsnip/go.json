{
  "test": {
    "prefix": "test",
    "body": [
      "func Test${1}(t *testing.T) {",
      "\ttests := map[string]struct{",
      "\t\t$2",
      "\t}{",
      "\t\t\"$3\":{$4},",
      "\t}",
      "\t",
      "\tfor n, tt := range tests {",
      "\t\tt.Run(n, func(t *testing.T) {",
      "\t\t\t$5",
      "\t\t})",
      "\t}$0",
      "}"
    ],
    "description": "test function"
  },
  "table test": {
    "prefix": "tabletest",
    "body": [
      "tests := map[string]struct{",
      "\t$1",
      "}{",
      "\t\"$2\":{$3},",
      "}",
      "",
      "for n, tt := range tests {",
      "\tt.Run(n, func(t *testing.T) {",
      "\t\t$4",
      "\t})",
      "}$0"
    ],
    "description": "table test"
  },
  "abs": {
    "prefix": "abs",
    "body": [
      "func abs(s ${1:int}) $1 {",
      "\tif s < 0 {",
      "\t\treturn -s",
      "\t}",
      "\treturn s",
      "}$0"
    ],
    "description": "min function"
  },
  "max": {
    "prefix": "max",
    "body": [
      "func max(s ...${1:int}) $1 {",
      "\tmaxContent := s[0]",
      "\tfor _, el := range s {",
      "\t\tif el > maxContent {",
      "\t\t\tmaxContent = el",
      "\t\t}",
      "\t}",
      "\treturn maxContent",
      "}$0"
    ],
    "description": "max function"
  },
  "min": {
    "prefix": "min",
    "body": [
      "func min(s ...${1:int}) $1 {",
      "\tminContent := s[0]",
      "\tfor _, el := range s {",
      "\t\tif el < minContent {",
      "\t\t\tminContent = el",
      "\t\t}",
      "\t}",
      "\treturn minContent",
      "}$0"
    ],
    "description": "min function"
  },
  "scanner": {
    "prefix": ["bufscanner", "scanner"],
    "body": [
      "sc := bufio.NewScanner(os.Stdin)",
      "sc.Split(bufio.Scan${1:Words}$0)"
    ],
    "description": "Create bufio.Scanner"
  },
  "scan": {
    "prefix": ["scan"],
    "body": [
      "sc.Scan()",
      "${1:n} ${2::}= sc.Text()$0"
    ],
    "description": "Scan"
  },
  "scanInt": {
    "prefix": ["scanInt"],
    "body": [
      "sc.Scan()",
      "${1:n}, _ ${2::}= strconv.Atoi(sc.Text())$0"
    ],
    "description": "Scan int"
  },
  "tysn": {
    "prefix": ["tysn"],
    "body": [
      "type $1 struct {",
      "\t$2",
      "}",
      "",
      "func New$1($3) $1 {",
      "\treturn $1{$4}",
      "}$0"
    ],
    "description": "Create struct and New method"
  },
  "queue": {
    "prefix": ["queue"],
    "body": [
      "type queue []${1:int}",
      "",
      "func (q queue) Push(p $1) queue {",
      "\treturn append(q, p)",
      "}",
      "",
      "func (q queue) Pop() ($1, queue) {",
      "\tif len(q) == 1 {",
      "\t\treturn q[0], make(queue, 0)",
      "\t}",
      "\treturn q[0], q[1:]",
      "}"
    ],
    "description": "Queue snippets"
  },
  "cmp-diff": {
    "prefix": ["cmp-diff"],
    "body": [
      "if diff := cmp.Diff(expect, got); diff != \"\" {",
      "\tt.Errorf(\"$1 result diff (-expect, +got)\\n%s\", diff)",
      "}$0"
    ]
  },
  "cache": {
    "prefix": ["cache", "inmemory"],
    "body": [
      "type $1Cacher struct {",
      "\tmu sync.RWMutex",
      "\tdata map[${2:string}]${3:string}",
      "}\n",
      "func New$1Cacher() *$1Cacher {",
      "\treturn &$1Cacher{mu: sync.RWMutex{}, data: make(map[$2]$3)}",
      "}\n",
      "func (s *$1Cacher) Get(key $2) ($3, bool) {",
      "\ts.mu.RLock()",
      "\tdefer s.mu.RUnlock()",
      "\tres, ok := s.data[key]",
      "\treturn res, ok",
      "}\n",
      "func (s *$1Cacher) Put(key $2, value $3) {",
      "\ts.mu.Lock()",
      "\tdefer s.mu.Unlock()",
      "\ts.data[key] = value",
      "}\n",
      "func (s *$1Cacher) Reset() {",
      "\ts.mu.Lock()",
      "\tdefer s.mu.Unlock()",
      "\ts.data = make(map[$2]$3)",
      "}"
    ]
  }
}
