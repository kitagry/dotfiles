snippet max "function for max"
	func max(s ...${1:int}) $1 {
		maxContent := s[0]
		for _, el := range s {
			if el > maxContent {
				maxContent = el
			}
		}
		return maxContent
	}
	${0}

snippet min "function for min"
	func min(s ...${1:int}) $1 {
		minContent := s[0]
		for _, el := range s {
			if el < minContent {
				minContent = el
			}
		}
		return minContent
	}
	${0}

snippet packm "snippet for main"
	package main

	func main() {
		${1}
	}${0}

snippet stack "stack"
	type stack []${1:int}

	func (s stack) Push(p $1) stack {
		return append(s, p)
	}

	func (s stack) Pop() ($1, stack) {
		return s[len(s)-1], s[:len(s)-1]
	}
	${0}

snippet queue "queue"
	type queue []${1:int}

	func (q queue) Push(p $1) queue {
		return append(q, p)
	}

	func (q queue) Pop() ($1, queue) {
		if len(q) == 1 {
			return q[0], make(queue, 0)
		}
		return q[0], q[1:]
	}

snippet unionFind "Union find"
	type unionTree struct {
		el     int
		parent *unionTree
		count  int
	}

	func newUnionTree(el int) unionTree {
		return unionTree{
			el:     el,
			parent: nil,
			count:  1,
		}
	}

	func (u *unionTree) root() *unionTree {
		if u.parent == nil {
			return u
		}

		root := u.parent.root()
		if root != u.parent {
			u.parent = root
		}
		return root
	}

	func same(u *unionTree, v *unionTree) bool {
		return u.root() == v.root()
	}

	func unite(u *unionTree, v *unionTree) bool {
		uRoot := u.root()
		vRoot := v.root()
		if uRoot == vRoot {
			return false
		}

		if uRoot.el < vRoot.el {
			vRoot.parent = uRoot
			uRoot.count += vRoot.count
		} else {
			uRoot.parent = vRoot
			vRoot.count += uRoot.count
		}
		return true
	}

	func size(u *unionTree) int {
		return u.root().count
	}
	${0}

snippet scanner "create scanner"
	sc := bufio.NewScanner(os.Stdin)${0}

snippet scanLong "scan long text"
	buf := make([]byte, 1e5+1)
	sc.Buffer(buf, 1e5+1)${0}

snippet scanInt "scan integer"
	sc.Scan()
	${1:N}, _ := strconv.Atoi(sc.Text())
	${0}

snippet atcoder-test "create test for atcoder"
	import (
		"bufio"
		"io/ioutil"
		"os"
		"testing"
	)

	func TestMain(t *testing.T) {
		file, err := os.Open("test.txt")
		if err != nil {
			t.Error("File is not found.")
		}
		defer file.Close()

		sc := bufio.NewScanner(file)
		testDatas := make([][]string, 0)
		for sc.Scan() {
			input := sc.Text() + "\n"
			for sc.Scan() && sc.Text() != "" {
				input += sc.Text() + "\n"
			}

			output := ""
			for sc.Scan() && sc.Text() != "" {
				output += sc.Text() + "\n"
			}

			testDatas = append(testDatas, []string{input, output})
		}

		for _, data := range testDatas {
			inr, inw, _ := os.Pipe()
			outr, outw, _ := os.Pipe()
			os.Stdin = inr
			os.Stdout = outw
			inw.Write([]byte(data[0]))
			inw.Close()
			main()
			outw.Close()
			outbuf, _ := ioutil.ReadAll(outr)
			if string(outbuf) != data[1] {
				t.Errorf("標準入力が\n%s\nのときに%s (正解は%s)", data[0], string(outbuf), data[1])
			}
		}
	}
	${0}
